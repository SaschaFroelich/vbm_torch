# -*- coding: utf-8 -*-
"""
Created on Fri Jan  5 10:33:44 2024

@author: sascha
"""

from IPython import get_ipython
get_ipython().run_line_magic("reset", "-f")

import matplotlib.pyplot as plt
import utils
import analysis_tools as anal
import seaborn as sns
import scipy
from scipy import stats
import pandas as pd
import numpy as np

# published = 0
# if published == 1:
#     expdata_df = pickle.load(open("behav_data/preproc_data_old_published_all.p", "rb" ))[1]
    
# else:
#     _, expdata_df = pickle.load(open("behav_data/preproc_data.p", "rb" ))

# hpcf_df = utils.compute_hpcf(expdata_df)
# error_df = anal.compute_errors(expdata_df)
# RT_df = utils.compute_RT(expdata_df)
# points_df = utils.compute_points(expdata_df)

# complete_df = pd.merge(hpcf_df, error_df, on = 'ID')
# complete_df = pd.merge(complete_df, RT_df, on = 'ID')
# complete_df = pd.merge(complete_df, points_df.loc[:, ['ID', 'points_day2', 'points_dtt_day2', 'points_stt_day2', 'points_stt_rand_day2', 'points_stt_seq_day2']], on = 'ID')
# complete_df = pd.merge(complete_df, expdata_df.loc[:, ['group', 'ID', 'q_notice_a_sequence']].groupby(['ID'], as_index = False).mean(), on = 'ID')

#%%
for col in complete_df.columns:
    if not isinstance(complete_df.loc[0, col], str):
        complete_df[col] = complete_df[col].astype(float)

def logit(x):
    return np.log(x / (1-x))

complete_df['hpcf_rand_day1_trafo'] = logit(complete_df['hpcf_rand_day1'])
complete_df['hpcf_cong_day1_trafo'] = logit(complete_df['hpcf_cong_day1'])
complete_df['hpcf_incong_day1_trafo'] = logit(complete_df['hpcf_incong_day1'])

complete_df['hpcf_rand_day2_trafo'] = logit(complete_df['hpcf_rand_day2'])
complete_df['hpcf_cong_day2_trafo'] = logit(complete_df['hpcf_cong_day2'])
complete_df['hpcf_incong_day2_trafo'] = logit(complete_df['hpcf_incong_day2'])

complete_df['RIspread_day1_trafo'] = complete_df['hpcf_rand_day1_trafo'] - complete_df['hpcf_incong_day1_trafo']
complete_df['CRspread_day1_trafo'] = complete_df['hpcf_cong_day1_trafo'] - complete_df['hpcf_rand_day1_trafo']
complete_df['CIspread_day1_trafo'] = complete_df['hpcf_cong_day1_trafo'] - complete_df['hpcf_incong_day1_trafo']

complete_df['RIspread_day2_trafo'] = complete_df['hpcf_rand_day2_trafo'] - complete_df['hpcf_incong_day2_trafo']
complete_df['CRspread_day2_trafo'] = complete_df['hpcf_cong_day2_trafo'] - complete_df['hpcf_rand_day2_trafo']
complete_df['CIspread_day2_trafo'] = complete_df['hpcf_cong_day2_trafo'] - complete_df['hpcf_incong_day2_trafo']

#%%
complete_df = complete_df.drop(40)
complete_df['RIspread_day2_trafo_z'] = (complete_df['RIspread_day2_trafo'])/ complete_df['RIspread_day2_trafo'].std()
complete_df['CRspread_day2_trafo_z'] = (complete_df['CRspread_day2_trafo'])/ complete_df['CRspread_day2_trafo'].std()
complete_df['ERdiff_z'] = (complete_df['ER_diff_stt_day2'])/ complete_df['ER_diff_stt_day2'].std()
complete_df['RTdiff_z'] = (complete_df['RT_diff_stt_day2'])/ complete_df['RT_diff_stt_day2'].std()

complete_df['exploitscore'] = -2*complete_df['RIspread_day2_trafo_z'] + \
                            complete_df['CRspread_day2_trafo_z']  + \
                                complete_df['ERdiff_z']

# complete_df['exploitscore'] = complete_df['CRspread_day2_trafo_z'] / complete_df['RIspread_day2_trafo_z'] + \
#                                 complete_df['ERdiff_z']
                                
# complete_df['exploitscore'] = -complete_df['RIspread_day2_trafo_z'] + \
#                                 complete_df['ERdiff_z']

# complete_df['exploitscore'] = -2*complete_df['RIspread_day2_trafo_z'] + \
#                                 complete_df['ERdiff_z'] +\
#                                   complete_df['RTdiff_z']

if published:
    complete_df = complete_df[complete_df['RT_diff_stt_day2'] < 60]
    complete_df = complete_df[complete_df['ER_diff_stt_day2'] < 0.08]
    
else:
    sociopsy_df = utils.get_sociopsy_df()
    complete_df = pd.merge(complete_df, sociopsy_df, on='ID')

complete_df.rename(columns={'jokertypes': 'DTT Types'}, inplace = True)

#%%

if 'conflict_param_day2' not in complete_df.columns:
    
    if 1:
        "Use exploiters"
        '''
            Fig 1
            x : ΔRT
            y : ΔER
            hue = CI-Spread
        '''
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['ER_diff_stt_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax, hue = 'CIspread_day2_trafo')
        ax.text(10, 0.035, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel(r'$\Delta$RT')
        ax.set_ylabel(r'$\Delta$ER')
        ax.axhline(0, color = 'k', linewidth = 0.5)
        ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_total_day2'], complete_df['hpcf_rand_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = complete_df, x = 'ER_total_day2', y = 'hpcf_rand_day2_trafo', ax = ax)
        ax.text(0.05, 0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('ER day 2')
        ax.set_ylabel('HRCF')
        # ax.axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_total_day2'], complete_df['RT_diff_stt_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = complete_df, x = 'ER_total_day2', y = 'RT_diff_stt_day2', ax = ax)
        ax.text(0.05, 0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('ER day 2')
        ax.set_ylabel(r'$\Delta$RT')
        # ax.axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_total_day2'], complete_df['RT_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = complete_df, x = 'ER_total_day2', y = 'RT_day2', ax = ax)
        ax.text(0, 420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('')
        ax.set_ylabel('RT')
        # ax.axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RIspread_day2_trafo'], complete_df['hpcf_rand_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = complete_df, x = 'RIspread_day2_trafo', y = 'hpcf_rand_day2_trafo', ax = ax)
        ax.text(0, 2, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('')
        ax.set_ylabel('')
        # ax.axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        '''
            y : RT
        '''
        fig, ax = plt.subplots()
        plt.scatter(range(5), [complete_df['RT_stt_seq_day2'].mean(), 
                     complete_df['RT_stt_rand_day2'].mean(),
                     complete_df['RT_randomdtt_day2'].mean(),
                     complete_df['RT_incongruent_day2'].mean(),
                     complete_df['RT_congruent_day2'].mean()])
        ax.set_ylabel('RT')
        plt.show()
        
        '''
            y : ER
        '''
        fig, ax = plt.subplots()
        plt.scatter(range(5), [complete_df['ER_stt_seq_day2'].mean(), 
                     complete_df['ER_stt_rand_day2'].mean(),
                     complete_df['ER_randomdtt_day2'].mean(),
                     complete_df['ER_incongruent_day2'].mean(),
                     complete_df['ER_congruent_day2'].mean()])
        ax.set_ylabel('ER')
        plt.show()
        
        '''
            x : HRCF Random
            y : CI-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize = (7,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2'], complete_df['CIspread_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2', y = 'CIspread_day2', ax = ax[0])
        ax[0].text(0.5, 0.35, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].set_xlabel('HPCF Random')
        ax[0].set_ylabel('CI-Spread')
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2_trafo'], complete_df['CIspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2_trafo', y = 'CIspread_day2_trafo', ax = ax[1])
        ax[1].text(0, 3, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].set_xlabel('HPCF Random Trafo')
        ax[1].set_ylabel('CI-Spread Trafo')
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        '''
            x : HRCF Random
            y : RI-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize = (7,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2'], complete_df['RIspread_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2', y = 'RIspread_day2', ax = ax[0])
        ax[0].text(0.5, 0.17, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].set_xlabel('HPCF Random')
        ax[0].set_ylabel('RI-Spread')
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2_trafo'], complete_df['RIspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2_trafo', y = 'RIspread_day2_trafo', ax = ax[1])
        ax[1].text(0, -0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].set_xlabel('HPCF Random Trafo')
        ax[1].set_ylabel('RI-Spread Trafo')
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        x = np.array(complete_df['hpcf_rand_day2_trafo'], dtype = 'float')
        y = np.array(complete_df['RIspread_day2_trafo'], dtype = 'float')
        scipy.stats.pearsonr(x,y)
        
        '''
            x : HRCF Random
            y : CR-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize = (7,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2'], complete_df['CRspread_day2'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2', y = 'CRspread_day2', ax = ax[0])
        ax[0].text(0.5, 0.17, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].set_xlabel('HPCF Random')
        ax[0].set_ylabel('CR-Spread')
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2_trafo'], complete_df['CRspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2_trafo', y = 'CRspread_day2_trafo', ax = ax[1])
        ax[1].text(0, -0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 10)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].set_xlabel('HPCF Random Trafo')
        ax[1].set_ylabel('CR-Spread Trafo')
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        # ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        '''
            x : ΔRT & ΔER
            y : RI-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RIspread_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[0])
        ax[0].text(-5,0.16, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel('RI-spread (pp)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RIspread_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[1])
        ax[1].text(-0.01, 0.16, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel('RI-spread (pp)', fontsize = 20)
        plt.show()
        
        '''
            x : ΔRT & ΔER
            y : CR-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['CRspread_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2', ax = ax[0])
        ax[0].text(-5,0.16, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel('CR-spread (pp)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['CRspread_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1])
        ax[1].text(-0.01, 0.16, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel('CR-spread (pp)', fontsize = 20)
        plt.show()
        
        
        '''
            x : ΔRT & ΔER
            y : RI-Spread (transformed)
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RIspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2_trafo', ax = ax[0])
        ax[0].text(10,-0.06, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_ylabel('RI-spread (transformed)', fontsize = 20)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RIspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2_trafo', ax = ax[1])
        ax[1].text(0, -0.06, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel('RI-spread (transformed)', fontsize = 20)
        plt.show()
        
        '''
            x : ΔRT & ΔER
            y : CR-Spread
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5))
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['CRspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2_trafo', ax = ax[0])
        ax[0].text(10,-0.06, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)')
        ax[0].set_ylabel('CRspread_day2_trafo')
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['CRspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2_trafo', ax = ax[1])
        ax[1].text(0, -0.06, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)')
        ax[1].set_ylabel('CR-Spread (transformed)')
        plt.show()
        
        
        '''
            x : RI-Spread
            y : CR-Spread
        '''
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RIspread_day2_trafo'], complete_df['CRspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = complete_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', ax = ax)
        ax.text(0.04, -0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('RI-Spread Trafo')
        ax.set_ylabel('CR-Spread Trafo')
        ax.axhline(0, color = 'k', linewidth = 0.5)
        ax.axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        no_outlier_df = complete_df.copy()
        no_outlier_df['hpcf_rand_day2 zscore'] = stats.zscore(no_outlier_df['hpcf_rand_day2'])
        no_outlier_df = no_outlier_df[abs(no_outlier_df['hpcf_rand_day2 zscore']) < 3]
        
        no_outlier_df['points_day2 zscore'] = stats.zscore(no_outlier_df['points_day2'])
        no_outlier_df = no_outlier_df[abs(no_outlier_df['points_day2 zscore']) < 3]
        
        '''
            Fig 3
            Subplot 1
            x : ΔRT
            y : HRCF Random DTT Day 2
            
            Subplot 2
            x : ΔER
            y : HRCF Random DTT Day 2
            
            With Outlier Detection
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['RT_diff_stt_day2'], no_outlier_df['hpcf_rand_day2'])
        sns.regplot(data = no_outlier_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[0])
        ax[0].text(-5,0.6, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        ax[0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['ER_diff_stt_day2'], no_outlier_df['hpcf_rand_day2'])
        sns.regplot(data = no_outlier_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1])
        ax[1].text(-0.01,0.6, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1].axvline(0, color = 'k', linewidth=0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        plt.show()
        
        fig, ax = plt.subplots(2,2, figsize=(15,15), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['ER_stt_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'ER_stt_day2', ax = ax[0,0])
        # sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
        ax[0,0].text(-0.01,0.14, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth=0.5)
        ax[0,0].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0,0].set_ylabel('ER (STT)', fontsize = 20)
        ax[0,0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['ER_stt_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_stt_day2', ax = ax[0,1])
        ax[0,1].text(10,0.12, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,1].axhline(0, color = 'k', linewidth=0.5)
        ax[0,1].axvline(0, color = 'k', linewidth=0.5)
        ax[0,1].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0,1].set_ylabel('ER (STT)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['ER_dtt_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'ER_dtt_day2', ax = ax[1,0])
        # sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
        ax[1,0].text(-0.01,0.14, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth=0.5)
        ax[1,0].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1,0].set_ylabel('ER (DTT)', fontsize = 20)
        ax[1,0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['ER_dtt_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_dtt_day2', ax = ax[1,1])
        ax[1,1].text(10,0.12, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,1].axhline(0, color = 'k', linewidth=0.5)
        ax[1,1].axvline(0, color = 'k', linewidth=0.5)
        ax[1,1].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1,1].set_ylabel('ER (DTT)', fontsize = 20)
        plt.title('Day 2')
        plt.show()
        
        fig, ax = plt.subplots(2,2, figsize=(15,15), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RT_stt_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RT_stt_day2', ax = ax[0,0])
        # sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
        ax[0,0].text(-0.01,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth=0.5)
        ax[0,0].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0,0].set_ylabel('RT (STT)', fontsize = 20)
        ax[0,0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RT_stt_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RT_stt_day2', ax = ax[0,1])
        ax[0,1].text(10,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,1].axhline(0, color = 'k', linewidth=0.5)
        ax[0,1].axvline(0, color = 'k', linewidth=0.5)
        ax[0,1].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0,1].set_ylabel('RT (STT)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RT_dtt_day2'])
        sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RT_dtt_day2', ax = ax[1,0])
        # sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
        ax[1,0].text(-0.01,440, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth=0.5)
        ax[1,0].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1,0].set_ylabel('RT (DTT)', fontsize = 20)
        ax[1,0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RT_dtt_day2'])
        sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RT_dtt_day2', ax = ax[1,1])
        ax[1,1].text(10,440, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,1].axhline(0, color = 'k', linewidth=0.5)
        ax[1,1].axvline(0, color = 'k', linewidth=0.5)
        ax[1,1].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1,1].set_ylabel('RT (DTT)', fontsize = 20)
        plt.title('Day 2')
        plt.show()
        
        '''
            Subplot 1
            x : ΔRT
            y : Points
            
            Subplot 2
            x : ΔER
            y : Points
            
            With Outlier Detection
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['RT_diff_stt_day2'], no_outlier_df['points_day2'])
        sns.regplot(data = no_outlier_df, x = 'RT_diff_stt_day2', y = 'points_day2', ax = ax[0])
        ax[0].text(10,2075, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel(r'Points', fontsize = 20)
        ax[0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['ER_diff_stt_day2'], no_outlier_df['points_day2'])
        sns.regplot(data = no_outlier_df, x = 'ER_diff_stt_day2', y = 'points_day2', ax = ax[1])
        ax[1].text(0.005,2075, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1].axvline(0, color = 'k', linewidth=0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel(r'Points', fontsize = 20)
        plt.show()
        
        '''
            Subplot 1
            x : ΔRT
            y : CR-Spread Trafo
            
            Subplot 2
            x : ΔER
            y : CR-Spread Trafo
            
            With Outlier Detection
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['RT_diff_stt_day2'], no_outlier_df['CRspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2_trafo', ax = ax[0])
        ax[0].text(10,2.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel(r'CRspread_day2_trafo', fontsize = 20)
        ax[0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['ER_diff_stt_day2'], no_outlier_df['CRspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2_trafo', ax = ax[1])
        ax[1].text(0.005,2.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1].axvline(0, color = 'k', linewidth=0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel(r'CRspread_day2_trafo', fontsize = 20)
        plt.show()
        
        '''
            Subplot 1
            x : ΔRT
            y : RI-Spread Trafo
            
            Subplot 2
            x : ΔER
            y : RI-Spread Trafo
            
            With Outlier Detection
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,5), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['RT_diff_stt_day2'], no_outlier_df['RIspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2_trafo', ax = ax[0])
        ax[0].text(10,-0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel(r'RIspread_day2_trafo', fontsize = 20)
        ax[0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['ER_diff_stt_day2'], no_outlier_df['RIspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2_trafo', ax = ax[1])
        ax[1].text(0.005,-0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1].axvline(0, color = 'k', linewidth=0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel(r'RIspread_day2_trafo', fontsize = 20)
        plt.show()
        
        fig, ax = plt.subplots(1,2, figsize=(15,5), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['CRspread_day2_trafo'], no_outlier_df['RIspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'CRspread_day2_trafo', y = 'RIspread_day2_trafo', ax = ax[0])
        ax[0].text(0,-0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0].set_xlabel(r'CRspread_day2_trafo', fontsize = 20)
        ax[0].set_ylabel(r'RIspread_day2_trafo', fontsize = 20)
        ax[0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['CRspread_day2_trafo'], no_outlier_df['RIspread_day2_trafo'])
        sns.regplot(data = no_outlier_df, x = 'CRspread_day2_trafo', y = 'RIspread_day2_trafo', ax = ax[1])
        ax[1].text(0,-0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1].axvline(0, color = 'k', linewidth=0.5)
        ax[1].set_xlabel(r'CRspread_day2_trafo', fontsize = 20)
        ax[1].set_ylabel(r'RIspread_day2_trafo', fontsize = 20)
        plt.show()
        
        '''
            x : ΔRT
            y : ΔER
            hue : RI-Spread
        '''
        # fig, ax = plt.subplots()
        # slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day1'], complete_df['ER_diff_stt_day1'])
        # sns.scatterplot(data = complete_df, x = 'RT_diff_stt_day1', y = 'ER_diff_stt_day1', hue = 'RIspread_day2_trafo', ax = ax)
        # # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax.axhline(0, color='k', linewidth = 0.5)
        # ax.axvline(0, color='k', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        # ax.set_xlabel(r'$\Delta$RT (ms)')
        # ax.set_ylabel(r'$\Delta$ER (pp)')
        # ax.set_xlim([-10, 40])
        # ax.set_ylim([-0.01, 0.04])
        # ax.legend(title='RI Spread (pp)')
        # plt.show()

    '''
        Exploiters
    '''
    exploitscore = 0
    if exploitscore: 
        num_exploiters = 20
        exploiters_df = complete_df.sort_values(by='exploitscore', ascending = False)[0:num_exploiters]
        no_exploiters_df = complete_df.sort_values(by='exploitscore', ascending = False)[num_exploiters:]
        anti_exploiters_df = complete_df.sort_values(by='exploitscore', ascending = False)[-num_exploiters:]
        medium_exploiters_df = complete_df.sort_values(by='exploitscore', ascending = False)[num_exploiters:2*num_exploiters]

        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        sns.scatterplot(data = complete_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', hue = 'ER_diff_stt_day2', size = 'ER_diff_stt_day2', style = 'exploiters', ax = ax)
        sns.scatterplot(data = exploiters_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', color ='red', size = 'ER_diff_stt_day2', markers='o')
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axhline(complete_df['CRspread_day2_trafo'].mean(), color='blue', linewidth = 0.5)
        
        ax.axvline(0, color='k', linewidth = 0.5)
        ax.axvline(complete_df['RIspread_day2_trafo'].mean(), color='blue', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        ax.set_xlabel('RI-Spread', fontsize = 20)
        ax.set_ylabel('CR-Spread', fontsize = 20)
        # ax.legend(title='Delta ER (pp)', fontsize = 10)
        # ax.set_xlim([-10, 40])
        # ax.set_ylim([-0.01, 0.04])
        # plt.savefig('/home/sascha/Desktop/Paper 2024/KW2/exploiters1.svg')
        ax.legend([],[], frameon=False)

        plt.show()

        '''
            x : exploitscore
            y : points total
        '''
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['points_day2'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'points_day2', ax = ax)
        ax.text(-6,1700, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('Switch-Score', fontsize = 20)
        ax.set_ylabel('Points', fontsize = 20)
        # ax.axvline(0)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['points_dtt_day2'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'points_dtt_day2', ax = ax)
        ax.text(-6, 300, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('Exploitscore', fontsize = 20)
        ax.set_ylabel('Points DTT', fontsize = 20)
        # ax.axvline(0)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['hpcf_rand_day2_trafo'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'hpcf_rand_day2_trafo', ax = ax)
        ax.text(-6,0.5, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_xlabel('Exploitscore')
        ax.set_ylabel('hpcf_rand_day2_trafo')
        # ax.axvline(0)
        plt.show()
        
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2_trafo'], complete_df['CRspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2_trafo', y = 'CRspread_day2_trafo', ax = ax)
        ax.text(2,1.5, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.set_ylabel('CRspread_day2_trafo')
        ax.set_xlabel('hpcf_rand_day2_trafo')
        # ax.axvline(0)
        plt.show()
        
        fig, ax = plt.subplots(1,3, figsize = (20,10), sharey=True, sharex=True)
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['RIspread_day2'])
        sns.regplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[0])
        # sns.scatterplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2', ax = ax[0], color='red')
        ax[0].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0].yaxis.set_tick_params(labelsize = 15)
        ax[0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0].set_ylabel('RI-Spread (pp)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(medium_exploiters_df['RT_diff_stt_day2'], medium_exploiters_df['RIspread_day2'])
        sns.regplot(data = medium_exploiters_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[1])
        # sns.scatterplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1], color='red')
        ax[1].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1].yaxis.set_tick_params(labelsize = 15)
        ax[1].xaxis.set_tick_params(labelsize = 15)
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1].set_ylabel('RI-Spread (pp)', fontsize = 20)
        # plt.suptitle('Exploiters')
        
        slope, intercept, r, p, std_err = stats.linregress(anti_exploiters_df['RT_diff_stt_day2'], anti_exploiters_df['RIspread_day2'])
        sns.regplot(data = anti_exploiters_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[2])
        # sns.scatterplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1], color='red')
        ax[2].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[2].yaxis.set_tick_params(labelsize = 15)
        ax[2].xaxis.set_tick_params(labelsize = 15)
        ax[2].axhline(0, color = 'k', linewidth = 0.5)
        ax[2].axvline(0, color = 'k', linewidth = 0.5)
        ax[2].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[2].set_ylabel('RI-Spread (pp)', fontsize = 20)
        plt.show()
        
        fig, ax = plt.subplots(1,3, figsize = (20,10), sharey=True, sharex=True)
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['ER_diff_stt_day2'], exploiters_df['RIspread_day2'])
        sns.regplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[0])
        # sns.scatterplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2', ax = ax[0], color='red')
        ax[0].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0].yaxis.set_tick_params(labelsize = 15)
        ax[0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0].set_ylabel('RI-Spread (pp)', fontsize = 20)

        slope, intercept, r, p, std_err = stats.linregress(medium_exploiters_df['ER_diff_stt_day2'], medium_exploiters_df['RIspread_day2'])
        sns.regplot(data = medium_exploiters_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[1])
        # sns.scatterplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1], color='red')
        ax[1].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1].yaxis.set_tick_params(labelsize = 15)
        ax[1].xaxis.set_tick_params(labelsize = 15)
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel('RI-Spread (pp)', fontsize = 20)
        # plt.suptitle('Exploiters')
        
        slope, intercept, r, p, std_err = stats.linregress(anti_exploiters_df['ER_diff_stt_day2'], anti_exploiters_df['RIspread_day2'])
        sns.regplot(data = anti_exploiters_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[2])
        # sns.scatterplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1], color='red')
        ax[2].text(0,-0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[2].yaxis.set_tick_params(labelsize = 15)
        ax[2].xaxis.set_tick_params(labelsize = 15)
        ax[2].axhline(0, color = 'k', linewidth = 0.5)
        ax[2].axvline(0, color = 'k', linewidth = 0.5)
        ax[2].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[2].set_ylabel('RI-Spread (pp)', fontsize = 20)
        plt.show()
        

        '''
            x : ΔRT
            y : ΔER
            hue : exploitscore
            red : exploiters
        '''
        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        sns.scatterplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', hue = 'exploitscore', ax = ax)
        # sns.scatterplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', color ='red')
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axvline(0, color='k', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        ax.set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax.set_ylabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax.legend(title='Exploit-Score', fontsize = 10)
        ax.set_xlim([-10, 40])
        ax.set_ylim([-0.01, 0.04])
        plt.show()
        
        '''
            x : exploitscore
            
            Fig 1
            y : RI-Spread
            
            Fig 2
            y : CR-Spread
            
            Fig 3
            y : ER Diff
            
            Fig 3
            y : RT Diff
        '''
        fig, ax = plt.subplots(4,1, figsize = (5,15), sharex = True)
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RIspread_day2'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'RIspread_day2_trafo', ax = ax[0])
        ax[0].text(0,0, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].set_xlabel('Exploitscore')
        ax[0].set_ylabel('RI-Spread Day 2 Trafo')
        # ax.axvline(0)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['CRspread_day2_trafo'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'CRspread_day2_trafo', ax = ax[1])
        ax[1].text(0,0, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[1].set_xlabel('Exploitscore')
        ax[1].set_ylabel('CR-Spread Day 2 trafo')
        # ax.axvline(0)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['ER_diff_stt_day2'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'ER_diff_stt_day2', ax = ax[2])
        ax[2].text(0,0, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[2].set_xlabel('Exploitscore')
        ax[2].set_ylabel('ER_diff_stt_day2')
        # ax.axvline(0)
        
        slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RT_diff_stt_day2'])
        sns.regplot(data = complete_df, x = 'exploitscore', y = 'RT_diff_stt_day2', ax = ax[3])
        ax[3].text(0,0, 'r=%.4f, p = %.4f'%(r,p))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[3].set_xlabel('Exploitscore')
        ax[3].set_ylabel('RT_diff_stt_day2')
        plt.show()
        
        # fig, ax = plt.subplots(3,1, figsize = (5,15), sharex = True)
        # slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RIspread_day2'])
        # sns.regplot(data = complete_df, x = 'exploitscore', y = 'RIspread_day2', ax = ax[0])
        # # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].set_xlabel('Exploitscore')
        # ax[0].set_ylabel('RI-Spread Day 2 Trafo')
        # # ax.axvline(0)
        
        # slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['CRspread_day2'])
        # sns.regplot(data = complete_df, x = 'exploitscore', y = 'CRspread_day2', ax = ax[1])
        # # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].set_xlabel('Exploitscore')
        # ax[1].set_ylabel('CR-Spread Day 2 trafo')
        # # ax.axvline(0)
        
        # slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['ER_diff_stt_day2'])
        # sns.regplot(data = complete_df, x = 'exploitscore', y = 'ER_diff_stt_day2', ax = ax[2])
        # # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[2].set_xlabel('Exploitscore')
        # ax[2].set_ylabel('ER_diff_stt_day2')
        # # ax.axvline(0)
        # plt.show()
        
    else:
        "Don't use exploitscore"
        ermean = 0
        if ermean:
            expl_condition = (complete_df['RIspread_day2_trafo'] < complete_df['RIspread_day2_trafo'].mean()) &\
                                        (complete_df['CRspread_day2_trafo'] > complete_df['CRspread_day2_trafo'].mean()) &\
                                        (complete_df['ER_diff_stt_day2'] > complete_df['ER_diff_stt_day2'].mean())
            
            expl_condition = (complete_df['RIspread_day2'] < complete_df['RIspread_day2'].mean()) &\
                                        (complete_df['CRspread_day2'] > complete_df['CRspread_day2'].mean()) &\
                                        (complete_df['ER_diff_stt_day2'] > complete_df['ER_diff_stt_day2'].mean())
                                        
            loser_cond = (complete_df['hpcf_rand_day2'] < complete_df['hpcf_rand_day2'].mean())
            losers_df = complete_df[loser_cond]
            no_losers_df = complete_df[~complete_df['ID'].isin(losers_df['ID'])]
                                        
            exploiters_df = complete_df[expl_condition]

            no_exploiters_df = complete_df[~complete_df['ID'].isin(exploiters_df['ID'])]
        
            complete_df['exploiters'] = complete_df.apply( lambda row: 1 if (row['RIspread_day2_trafo'] < complete_df['RIspread_day2_trafo'].mean()) &\
                                        (row['CRspread_day2_trafo'] > complete_df['CRspread_day2_trafo'].mean()) &\
                                        (row['ER_diff_stt_day2'] > 0) else 0, axis = 1)
                
        else:
            expl_condition = (complete_df['RIspread_day2_trafo'] < complete_df['RIspread_day2_trafo'].mean()) &\
                                        (complete_df['CRspread_day2_trafo'] > complete_df['CRspread_day2_trafo'].mean()) &\
                                        (complete_df['ER_diff_stt_day2'] > 0)
            
            expl_condition = (complete_df['RIspread_day2_trafo'] < complete_df['RIspread_day2_trafo'].mean()) &\
                                        (complete_df['CRspread_day2_trafo'] > complete_df['CRspread_day2_trafo'].mean()) &\
                                        (complete_df['ER_diff_stt_day2'] > 0)
            exploiters_df = complete_df[expl_condition]
                
            no_exploiters_df = complete_df[~complete_df['ID'].isin(exploiters_df['ID'])]
        
            complete_df['exploiters'] = complete_df.apply( lambda row: 1 if (row['RIspread_day2_trafo'] < complete_df['RIspread_day2_trafo'].mean()) &\
                                        (row['CRspread_day2_trafo'] > complete_df['CRspread_day2_trafo'].mean()) &\
                                        (row['ER_diff_stt_day2'] > 0) else 0, axis = 1)


        scipy.stats.ttest_ind(exploiters_df['RT_diff_stt_day2'], no_exploiters_df['RT_diff_stt_day2'])

        if 0:
            import statsmodels.api as sm
            regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'ER_diff_stt_day2', 'RT_diff_stt_day2']
            regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'ER_diff_stt_day2']
            # regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'RT_diff_stt_day2']
            x = np.array(complete_df.loc[:, [*regr_params]], dtype='float')
            y = np.array(complete_df['points_day2'], dtype = 'float')
            X = sm.add_constant(x)
            model = sm.OLS(y, X).fit()
            print(model.summary())
    
            complete_df['hpcf_rand_day2_z'] = (complete_df['hpcf_rand_day2'] - complete_df['hpcf_rand_day2'].mean()) / complete_df['hpcf_rand_day2'].std()
            complete_df['RIspread_day2_trafo_z'] = (complete_df['RIspread_day2_trafo'] - complete_df['RIspread_day2_trafo'].mean()) / complete_df['RIspread_day2_trafo'].std() 
            complete_df['CRspread_day2_trafo_z'] = (complete_df['CRspread_day2_trafo'] - complete_df['CRspread_day2_trafo'].mean()) / complete_df['CRspread_day2_trafo'].std()
            complete_df['ER_diff_stt_day2_z'] = (complete_df['ER_diff_stt_day2'] - complete_df['ER_diff_stt_day2'].mean()) / complete_df['ER_diff_stt_day2'].std()
            complete_df['RT_diff_stt_day2_z'] = (complete_df['RT_diff_stt_day2'] - complete_df['RT_diff_stt_day2'].mean()) / complete_df['RT_diff_stt_day2'].std() 
    
            regr_params = ['hpcf_rand_day2_z', 'RIspread_day2_trafo_z', 'CRspread_day2_trafo_z', 'ER_diff_stt_day2_z', 'RT_diff_stt_day2_z']
            # regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'RT_diff_stt_day2']
            x = np.array(complete_df.loc[:, [*regr_params]], dtype='float')
            y = np.array(complete_df['points_day2'], dtype = 'float')
            X = sm.add_constant(x)
            model = sm.OLS(y, X).fit()
            print(model.summary())
    
            regr_params = ['hpcf_rand_day2_z', 'RIspread_day2_trafo_z', 'CRspread_day2_trafo_z', 'ER_diff_stt_day2_z', 'RT_diff_stt_day2_z']
            # regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'RT_diff_stt_day2']
            x = np.array(complete_df.loc[:, [*regr_params]], dtype='float')
            y = np.array(complete_df['points_stt_day2'], dtype = 'float')
            X = sm.add_constant(x)
            model = sm.OLS(y, X).fit()
            print(model.summary())
            
            regr_params = ['hpcf_rand_day2_z', 'RIspread_day2_trafo_z', 'CRspread_day2_trafo_z', 'ER_diff_stt_day2_z', 'RT_diff_stt_day2_z']
            # regr_params = ['hpcf_rand_day2', 'RIspread_day2_trafo', 'CRspread_day2_trafo', 'RT_diff_stt_day2']
            x = np.array(complete_df.loc[:, [*regr_params]], dtype='float')
            y = np.array(complete_df['points_dtt_day2'], dtype = 'float')
            X = sm.add_constant(x)
            model = sm.OLS(y, X).fit()
            print(model.summary())
    
            # from sklearn.linear_model import Ridge
            # ridge_model = Ridge(alpha=1.0)
            # ridge_model.fit(X, y)
            # print(ridge_model.summary())
    
            # # from regressors import stats    
            # stats.summary(ridge_model, X, y)
        
        test_df = complete_df.drop(53)
        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        slope, intercept, r, p, std_err = stats.linregress(complete_df['hpcf_rand_day2_z'], complete_df['points_stt_day2'])
        sns.regplot(data = complete_df, x = 'hpcf_rand_day2_z', y = 'points_stt_day2', ax = ax)
        ax.text(-2,-3, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axvline(0, color='k', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        # ax.set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        # ax.set_ylabel(r'$\Delta$ER (pp)', fontsize = 20)
        # ax.legend(title='Exploit-Score', fontsize = 10)
        # ax.set_xlim([-10, 40])
        # ax.set_ylim([-0.01, 0.04])
        # plt.savefig('/home/sascha/Desktop/Paper 2024/KW2/exploiters2.svg')
        plt.show()

        '''
            x : RIspread
            y : CRspread
            hue : ΔER-Spread
            red : exploiters
        '''
        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        sns.scatterplot(data = complete_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', hue = 'ER_diff_stt_day2', size = 'ER_diff_stt_day2', style = 'exploiters', ax = ax)
        # sns.scatterplot(data = exploiters_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', hue ='ER_diff_stt_day2', size = 'ER_diff_stt_day2', markers='o')
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axhline(complete_df['CRspread_day2_trafo'].mean(), color='blue', linewidth = 0.5)
        
        ax.axvline(0, color='k', linewidth = 0.5)
        ax.axvline(complete_df['RIspread_day2_trafo'].mean(), color='blue', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        ax.set_xlabel('RI-Spread', fontsize = 20)
        ax.set_ylabel('CR-Spread', fontsize = 20)
        # ax.legend(title='Delta ER (pp)', fontsize = 10)
        # ax.set_xlim([-10, 40])
        # ax.set_ylim([-0.01, 0.04])
        plt.savefig('/home/sascha/Desktop/Paper 2024/KW2/exploiters.svg')
        plt.show()
        
        '''
            x : ΔRT
            y : ΔER
            hue : exploitscore
            red : exploiters
        '''
        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        sns.scatterplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', hue = 'exploiters', ax = ax)
        # sns.scatterplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', color ='red')
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axvline(0, color='k', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        ax.set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax.set_ylabel(r'$\Delta$ER (pp)', fontsize = 20)
        # ax.legend(title='Exploit-Score', fontsize = 10)
        ax.set_xlim([-10, 40])
        ax.set_ylim([-0.01, 0.04])
        plt.savefig('/home/sascha/Desktop/Paper 2024/KW2/exploiters2.svg')
        plt.show()
        
        plt.rcParams['legend.title_fontsize'] = 'x-large'
        fig, ax = plt.subplots()
        sns.scatterplot(data = complete_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', hue = 'ER_diff_stt_day2', ax = ax)
        sns.scatterplot(data = exploiters_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', color ='red')
        ax.yaxis.set_tick_params(labelsize = 15)
        ax.xaxis.set_tick_params(labelsize = 15)
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axvline(0, color='k', linewidth = 0.5)
        # sns.move_legend(ax, "lower right")
        ax.set_xlabel('RI-Spread', fontsize = 20)
        ax.set_ylabel('CR-Spread', fontsize = 20)
        # ax.legend(title='Delta ER (pp)', fontsize = 10)
        # ax.set_xlim([-10, 40])
        # ax.set_ylim([-0.01, 0.04])
        plt.show()

        
        '''
            Top plot
            x : ΔRT
            y : CR-Spread
            red : exploiters
        '''
        fig, ax = plt.subplots(2,1, figsize=(7,10), sharey=True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RT_diff_stt_day2'], no_exploiters_df['CRspread_day2_trafo'])
        sns.scatterplot(data = no_exploiters_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2', ax = ax[0])
        sns.scatterplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'CRspread_day2', ax = ax[0], color='red')
        # ax[0].text(10,-0.03, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0].yaxis.set_tick_params(labelsize = 15)
        ax[0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0].set_ylabel('CR-Spread (pp)', fontsize = 20)
        ax[0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['ER_diff_stt_day2'], no_exploiters_df['CRspread_day2_trafo'])
        sns.scatterplot(data = no_exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1])
        sns.scatterplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'CRspread_day2', ax = ax[1], color='red')
        # ax[1].text(0.004, -0.03, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1].yaxis.set_tick_params(labelsize = 15)
        ax[1].xaxis.set_tick_params(labelsize = 15)
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1].set_ylabel('CR-Spread (pp)', fontsize = 20)
        # plt.suptitle('Exploiters')
        plt.show()

        '''
            ΔRT & ΔER vs RI-Spread
            Top Row: No Exploiters
            Bottom Row: Exploiters
        '''
        fig, ax = plt.subplots(2,2, figsize=(15,10), sharey=True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RT_diff_stt_day2'], no_exploiters_df['RIspread_day2'])
        sns.regplot(data = no_exploiters_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[0,0])
        ax[0,0].text(10,-0.03, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,0].yaxis.set_tick_params(labelsize = 15)
        ax[0,0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax[0,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,0].set_ylabel('RI-Spread (pp)', fontsize = 20)
        ax[0,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['ER_diff_stt_day2'], no_exploiters_df['RIspread_day2'])
        sns.regplot(data = no_exploiters_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[0,1])
        ax[0,1].text(0.004, -0.03, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,1].yaxis.set_tick_params(labelsize = 15)
        ax[0,1].xaxis.set_tick_params(labelsize = 15)
        ax[0,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0,1].set_ylabel('RI-Spread (pp)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['RIspread_day2'])
        sns.regplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[1,0])
        ax[1,0].text(5, 0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,0].yaxis.set_tick_params(labelsize = 15)
        ax[1,0].xaxis.set_tick_params(labelsize = 15)
        ax[1,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,0].set_ylabel('RI-Spread (pp)', fontsize = 20)
        ax[1,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1,0].sharex(ax[0,0])
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['ER_diff_stt_day2'], exploiters_df['RIspread_day2'])
        sns.regplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[1,1])
        ax[1,1].text(0.004, 0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,1].yaxis.set_tick_params(labelsize = 15)
        ax[1,1].xaxis.set_tick_params(labelsize = 15)
        ax[1,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1,1].set_ylabel('RI-Spread (pp)', fontsize = 20)
        ax[1,1].sharex(ax[0,1])
        plt.show()
        
        '''
            x : RI-Spread
            y : CR-Spread
            Left : No Exploiters
            Right : Exploiters
        '''
        fig, ax = plt.subplots(1,2, figsize=(15,8), sharey=True, sharex = True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RIspread_day2_trafo'], no_exploiters_df['CRspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = no_exploiters_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', ax = ax[0])
        ax[0].text(0.04, -0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0].yaxis.set_tick_params(labelsize = 15)
        ax[0].xaxis.set_tick_params(labelsize = 15)
        ax[0].set_xlabel('RI-Spread', fontsize = 20)
        ax[0].set_ylabel('CR-Spread', fontsize = 20)
        ax[0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0].axvline(0, color = 'k', linewidth = 0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RIspread_day2_trafo'], exploiters_df['CRspread_day2_trafo'])
        # sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_diff_stt_day2', ax = ax)
        sns.regplot(data = exploiters_df, x = 'RIspread_day2_trafo', y = 'CRspread_day2_trafo', ax = ax[1])
        ax[1].text(0.04, -0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1].yaxis.set_tick_params(labelsize = 15)
        ax[1].xaxis.set_tick_params(labelsize = 15)
        ax[1].set_xlabel('RI-Spread', fontsize = 20)
        ax[1].set_ylabel('CR-Spread', fontsize = 20)
        ax[1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1].axvline(0, color = 'k', linewidth = 0.5)
        plt.show()
        
        
        '''
            ΔRT & ΔER vs HRCF
            Top Row: No Exploiters
            Bottom Row: Exploiters
        '''
        fig, ax = plt.subplots(2,2, figsize=(15,10), sharey=True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RT_diff_stt_day2'], no_exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = no_exploiters_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[0,0])
        ax[0,0].text(5,0.55, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,0].yaxis.set_tick_params(labelsize = 15)
        ax[0,0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0,0].set_ylabel('HRCF', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['ER_diff_stt_day2'], no_exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = no_exploiters_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[0,1])
        ax[0,1].text(0.004, 0.55, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,1].yaxis.set_tick_params(labelsize = 15)
        ax[0,1].xaxis.set_tick_params(labelsize = 15)
        # ax[0,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0,1].set_ylabel('HRCF', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,0])
        ax[1,0].text(5, 0.55, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,0].yaxis.set_tick_params(labelsize = 15)
        ax[1,0].xaxis.set_tick_params(labelsize = 15)
        # ax[1,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1,0].set_ylabel('HRCF', fontsize = 20)
        ax[1,0].sharex(ax[0,0])
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['ER_diff_stt_day2'], exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,1])
        ax[1,1].text(0.004, 0.55, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,1].yaxis.set_tick_params(labelsize = 15)
        ax[1,1].xaxis.set_tick_params(labelsize = 15)
        # ax[1,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1,1].set_ylabel('HRCF', fontsize = 20)
        ax[1,1].sharex(ax[0,1])
        plt.show()
        
        '''
            ΔRT & ΔER vs Points
            no Exploiters vs exploiters
        '''
        fig, ax = plt.subplots(2,2, figsize=(15,10), sharey=True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RT_diff_stt_day2'], no_exploiters_df['points_day2'])
        sns.regplot(data = no_exploiters_df, x = 'RT_diff_stt_day2', y = 'points_day2', ax = ax[0,0])
        ax[0,0].text(10,2075, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,0].yaxis.set_tick_params(labelsize = 15)
        ax[0,0].xaxis.set_tick_params(labelsize = 15)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[0,0].set_ylabel('Points', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['ER_diff_stt_day2'], no_exploiters_df['points_day2'])
        sns.regplot(data = no_exploiters_df, x = 'ER_diff_stt_day2', y = 'points_day2', ax = ax[0,1])
        ax[0,1].text(0.004, 2075, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[0,1].yaxis.set_tick_params(labelsize = 15)
        ax[0,1].xaxis.set_tick_params(labelsize = 15)
        # ax[0,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[0,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[0,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[0,1].set_ylabel('Points', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['points_day2'])
        sns.regplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'points_day2', ax = ax[1,0])
        ax[1,0].text(10, 1700, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,0].yaxis.set_tick_params(labelsize = 15)
        ax[1,0].xaxis.set_tick_params(labelsize = 15)
        # ax[1,0].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,0].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
        ax[1,0].set_ylabel('Points', fontsize = 20)
        ax[1,0].sharex(ax[0,0])
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['ER_diff_stt_day2'], exploiters_df['points_day2'])
        sns.regplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'points_day2', ax = ax[1,1])
        ax[1,1].text(0.004, 1700, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        ax[1,1].yaxis.set_tick_params(labelsize = 15)
        ax[1,1].xaxis.set_tick_params(labelsize = 15)
        # ax[1,1].axhline(0, color = 'k', linewidth = 0.5)
        ax[1,1].axvline(0, color = 'k', linewidth = 0.5)
        ax[1,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
        ax[1,1].set_ylabel('Points', fontsize = 20)
        ax[1,1].sharex(ax[0,1])
        plt.show()
        
        
        '''
            x : ΔRT
            y : HRCF Random DTT
            only exploiters
            
            x : ΔER
            y : HRCF Random DTT
            only exploiters
        '''
        fig, ax = plt.subplots(2,2, figsize=(15,15), sharey = True)
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['RT_diff_stt_day2'], no_exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = no_exploiters_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[0,0])
        ax[0,0].text(10,0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[0,0].set_xlabel(r'$\Delta$RT', fontsize = 20)
        ax[0,0].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        ax[0,0].axvline(0, color = 'k', linewidth=0.5)
        
        slope, intercept, r, p, std_err = stats.linregress(no_exploiters_df['ER_diff_stt_day2'], no_exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = no_exploiters_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[0,1])
        ax[0,1].text(0.01,0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[0,1].axvline(0, color = 'k', linewidth=0.5)
        ax[0,1].set_xlabel(r'$\Delta$ER', fontsize = 20)
        ax[0,1].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = exploiters_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,0])
        ax[1,0].text(10,0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[0].axhline(0, color = 'k', linewidth=0.5)
        ax[1,0].set_xlabel(r'$\Delta$RT', fontsize = 20)
        ax[1,0].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        ax[1,0].axvline(0, color = 'k', linewidth=0.5)
        ax[1,0].sharex(ax[0,0])
        
        slope, intercept, r, p, std_err = stats.linregress(exploiters_df['ER_diff_stt_day2'], exploiters_df['hpcf_rand_day2'])
        sns.regplot(data = exploiters_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,1])
        ax[1,1].text(0.01,0.5, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax[1].axhline(0, color = 'k', linewidth=0.5)
        ax[1,1].axvline(0, color = 'k', linewidth=0.5)
        ax[1,1].set_xlabel(r'$\Delta$ER', fontsize = 20)
        ax[1,1].set_ylabel(r'HRCF (Random DTT)', fontsize = 20)
        ax[1,1].sharex(ax[0,1])
        plt.show()
        
        '''
            x : HPCF Random DTT Day 2
            y : CR-Spread
            only exploiters
        '''
        fig, ax = plt.subplots()
        sns.scatterplot(data = exploiters_df, x = 'hpcf_rand_day2', y = 'CRspread_day2_trafo', ax = ax, color = 'red')
        # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axhline(exploiters_df['CRspread_day2_trafo'].mean(), color='r', linewidth = 0.5)
        ax.axhline(no_exploiters_df['CRspread_day2_trafo'].mean(), color='b', linewidth = 0.5)
        ax.axvline(exploiters_df['hpcf_rand_day2'].mean(), color='r', linewidth = 0.5)
        ax.axvline(no_exploiters_df['hpcf_rand_day2'].mean(), color='b', linewidth = 0.5)
        ax.set_ylabel('CR-Spread')
        ax.set_xlabel('HRCF Random DTT')
        # ax.axvline(0)
        plt.title('Exploiters')
        plt.show()
        
        fig, ax = plt.subplots()
        sns.scatterplot(data = exploiters_df, x = 'hpcf_rand_day2', y = 'CRspread_day2', ax = ax, color = 'red')
        # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        ax.axhline(0, color='k', linewidth = 0.5)
        ax.axhline(exploiters_df['CRspread_day2_trafo'].mean(), color='r', linewidth = 0.5)
        ax.axhline(no_exploiters_df['CRspread_day2_trafo'].mean(), color='b', linewidth = 0.5)
        ax.axvline(exploiters_df['hpcf_rand_day2'].mean(), color='r', linewidth = 0.5)
        ax.axvline(no_exploiters_df['hpcf_rand_day2'].mean(), color='b', linewidth = 0.5)
        ax.set_ylabel('CR-Spread')
        ax.set_xlabel('HRCF Random DTT')
        # ax.axvline(0)
        plt.title('Exploiters')
        plt.show()

        scipy.stats.ttest_ind(exploiters_df['CRspread_day2_trafo'], no_exploiters_df['CRspread_day2_trafo'])
        scipy.stats.ttest_ind(exploiters_df['hpcf_rand_day2'], no_exploiters_df['hpcf_rand_day2'])
        scipy.stats.ttest_ind(exploiters_df['RIspread_day2_trafo'], no_exploiters_df['RIspread_day2_trafo'])
        
        compare_df = pd.DataFrame()
        hpcf_day2 = []
        hpcf_day2.extend(np.array(exploiters_df['hpcf_day2'], dtype = float))
        hpcf_day2.extend(np.array(no_exploiters_df['hpcf_day2'], dtype = float))
        
        hpcf_rand_day2 = []
        hpcf_rand_day2.extend(np.array(exploiters_df['hpcf_rand_day2'], dtype = float))
        hpcf_rand_day2.extend(np.array(no_exploiters_df['hpcf_rand_day2'], dtype = float))
        
        agenttype = []
        agenttype.extend(['exploiter']*len(exploiters_df))
        agenttype.extend(['no exploiter']*len(no_exploiters_df))
        
        points_day2 = []
        points_day2.extend(np.array(exploiters_df['points_day2'], dtype = float))
        points_day2.extend(np.array(no_exploiters_df['points_day2'], dtype = float))
        
        compare_df['hpcf_day2'] = hpcf_day2
        compare_df['agenttype'] = agenttype
        compare_df['points_day2'] = points_day2
        compare_df['hpcf_rand_day2'] = hpcf_rand_day2
    
        '''
            violinplot
            HPCF Day 2
            x : exploiters, non-exploiters
        '''
        fig, ax = plt.subplots(1,2, figsize=(25,10))
        # slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['RIspread_day2_trafo'])
        sns.violinplot(data = compare_df, x = 'agenttype', y = 'hpcf_rand_day2', ax = ax[0])
        ax[0].yaxis.set_tick_params(labelsize = 30)
        ax[0].xaxis.set_tick_params(labelsize = 30)
        # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax.axhline(0, color='k', linewidth = 0.5)
        # ax.set_ylabel('CR-Spread')
        # ax.set_xlabel('HRCF Random DTT')
        # ax.axvline(0)
        ax[0].set_ylabel('HRCF Random DTT (%)', fontsize = 25)
        ax[0].set_xlabel('Participant', fontsize = 25)
        # plt.show()
        
        scipy.stats.ttest_ind(exploiters_df['hpcf_rand_day2'], no_exploiters_df['hpcf_rand_day2'])
    
        # fig, ax = plt.subplots()
        # slope, intercept, r, p, std_err = stats.linregress(exploiters_df['RT_diff_stt_day2'], exploiters_df['RIspread_day2_trafo'])
        sns.violinplot(data = compare_df, x = 'agenttype', y = 'points_day2', ax = ax[1])
        ax[1].yaxis.set_tick_params(labelsize = 30)
        ax[1].xaxis.set_tick_params(labelsize = 30)
        # ax.text(0,0, 'r=%.4f, p = %.4f, slope=%.4f+-%.4f'%(r,p,slope,std_err))
        # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
        # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
        # ax.axhline(0, color='k', linewidth = 0.5)
        # ax.set_ylabel('CR-Spread')
        # ax.set_xlabel('HRCF Random DTT')
        # ax.axvline(0)
        ax[1].set_ylabel('Points Total', fontsize = 25)
        ax[1].set_xlabel('Participant', fontsize = 25)
        plt.show()
    
        scipy.stats.ttest_ind(np.array(exploiters_df['points_day2'], dtype=float), 
                              np.array(no_exploiters_df['points_day2'], dtype = float))
    
elif 'conflict_param_day2' in complete_df.columns:
    fig, ax = plt.subplots(1,2, figsize =(15, 10))
    slope, intercept, r, p, std_err = stats.linregress(complete_df['conflict_param_day2'], complete_df['ER_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'conflict_param_day2', y = 'ER_diff_stt_day2', ax = ax[0])
    ax[0].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[0].set_ylabel(r'$\Theta_{Conflict}$', fontsize = 20)
    ax[0].set_xlabel(r'$\Delta ER$', fontsize = 20)
    # ax.axvline(0)
    # plt.title('Exploiters')
    # plt.savefig('/home/sascha/Desktop/Nextcloud/work/presentations/Dysco/2024_01_03/Conflict/modeling_fig8.png', dpi=300)
    
    slope, intercept, r, p, std_err = stats.linregress(complete_df['conflict_param_day2'], complete_df['RT_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'conflict_param_day2', y = 'RT_diff_stt_day2', ax = ax[1])
    ax[1].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[1].set_ylabel(r'$\Theta_{Conflict}$', fontsize = 20)
    ax[1].set_xlabel(r'$\Delta RT$', fontsize = 20)
    plt.show()
    
    fig, ax = plt.subplots(1,2, figsize =(15, 10))
    slope, intercept, r, p, std_err = stats.linregress(complete_df['theta_Q_day2'], complete_df['ER_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'theta_Q_day2', y = 'ER_diff_stt_day2', ax = ax[0])
    ax[0].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[0].set_ylabel(r'$\Theta_{Q}$', fontsize = 20)
    ax[0].set_xlabel(r'$\Delta ER$', fontsize = 20)
    # ax.axvline(0)
    # plt.title('Exploiters')
    # plt.savefig('/home/sascha/Desktop/Nextcloud/work/presentations/Dysco/2024_01_03/Conflict/modeling_fig8.png', dpi=300)
    
    slope, intercept, r, p, std_err = stats.linregress(complete_df['theta_Q_day2'], complete_df['RT_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'theta_Q_day2', y = 'RT_diff_stt_day2', ax = ax[1])
    ax[1].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[1].set_ylabel(r'$\Theta_{Q}$', fontsize = 20)
    ax[1].set_xlabel(r'$\Delta RT$', fontsize = 20)
    plt.show()
    
    fig, ax = plt.subplots(1,2, figsize =(15, 10))
    slope, intercept, r, p, std_err = stats.linregress(complete_df['theta_rep_day2'], complete_df['ER_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'theta_rep_day2', y = 'ER_diff_stt_day2', ax = ax[0])
    ax[0].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[0].set_ylabel(r'$\Theta_{R}$', fontsize = 20)
    ax[0].set_xlabel(r'$\Delta ER$', fontsize = 20)
    # ax.axvline(0)
    # plt.title('Exploiters')
    # plt.savefig('/home/sascha/Desktop/Nextcloud/work/presentations/Dysco/2024_01_03/Conflict/modeling_fig8.png', dpi=300)
    
    slope, intercept, r, p, std_err = stats.linregress(complete_df['theta_rep_day2'], complete_df['RT_diff_stt_day2'])
    sns.regplot(data = complete_df, x = 'theta_rep_day2', y = 'RT_diff_stt_day2', ax = ax[1])
    ax[1].text(1.2, 0.0, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.axhline(0, color='k', linewidth = 0.5)
    ax[1].set_ylabel(r'$\Theta_{R}$', fontsize = 20)
    ax[1].set_xlabel(r'$\Delta RT$', fontsize = 20)
    plt.show()
    
    fig, ax = plt.subplots()
    slope, intercept, r, p, std_err = stats.linregress(complete_df['theta_rep_day2'], complete_df['conflict_param_day2'])
    sns.regplot(data = complete_df, x = 'theta_rep_day2', y = 'conflict_param_day2', ax = ax)
    ax.text(2,1.5, 'r=%.4f, p = %.4f'%(r,p))
    # ax.axhline(complete_df['ER_diff_stt_day2'].mean())
    # ax.axvline(complete_df['RT_diff_stt_day2'].mean())
    # ax.set_ylabel('CRspread_day2_trafo')
    # ax.set_xlabel('hpcf_rand_day2_trafo')
    # ax.axvline(0)
    plt.show()
    

#%%
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['points_day2'])
print(r,p)
'''
    One might think that the correlation between exploitscore and hpcf rand day 2 comes from the fact
    that lower hpcf rand is associated with higher CR spread, which leads to higher exploit score. This
    is however not the case.
'''
test_df = complete_df.drop(58)
slope, intercept, r, p, std_err = stats.linregress(test_df['exploitscore'], test_df['hpcf_rand_day2_trafo'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['CRspread_day2_trafo'], complete_df['hpcf_rand_day2_trafo'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['CRspread_day2_trafo'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RIspread_day2_trafo'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['CRspread_day2'])
# print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RIspread_day2'])
# print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['ER_diff_stt_day2'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['RT_diff_stt_day2'])
print(r,p)
slope, intercept, r, p, std_err = stats.linregress(complete_df['exploitscore'], complete_df['age'])
print(r,p)


#%%

# no_outlier_df = complete_df.copy()
# no_outlier_df['hpcf_rand_day2_trafo_zscore'] = stats.zscore(no_outlier_df['hpcf_rand_day2_trafo'])
# no_outlier_df = no_outlier_df[abs(no_outlier_df['hpcf_rand_day2_trafo_zscore']) < 3]

# no_outlier_df['points_day2 zscore'] = stats.zscore(no_outlier_df['points_day2'])
# no_outlier_df = no_outlier_df[abs(no_outlier_df['points_day2 zscore']) < 3]

"Day 1"
fig, ax = plt.subplots(4,2, figsize = (15, 35))
slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day1'], complete_df['RIspread_day1'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day1', y = 'RIspread_day1', ax = ax[0,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
ax[0,0].text(-0.01,0.14, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[0,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[0,0].set_ylabel('RI-Spread', fontsize = 20)
ax[0,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day1'], complete_df['RIspread_day1'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day1', y = 'RIspread_day1', ax = ax[0,1])
ax[0,1].text(0 ,0.12, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[0,1].axvline(0, color = 'k', linewidth=0.5)
ax[0,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[0,1].set_ylabel('RI-Spread', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day1'], complete_df['hpcf_rand_day1'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day1', y = 'hpcf_rand_day1_trafo', ax = ax[1,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
ax[1,0].text(-0.01,0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[1,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[1,0].set_ylabel('HRCF (random DTT)', fontsize = 20)
ax[1,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day1'], complete_df['hpcf_rand_day1'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day1', y = 'hpcf_rand_day1_trafo', ax = ax[1,1])
ax[1,1].text(0,0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[1,1].axvline(0, color = 'k', linewidth=0.5)
ax[1,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[1,1].set_ylabel('HRCF (random DTT)', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day1'], complete_df['ER_total_day1'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day1', y = 'ER_total_day1', ax = ax[2,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
ax[2,0].text(-0.01,0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[2,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[2,0].set_ylabel('ER', fontsize = 20)
ax[2,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day1'], complete_df['ER_total_day1'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day1', y = 'ER_total_day1', ax = ax[2,1])
ax[2,1].text(0,0.05, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[2,1].axvline(0, color = 'k', linewidth=0.5)
ax[2,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[2,1].set_ylabel('ER', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day1'], complete_df['RT_day1'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day1', y = 'RT_day1', ax = ax[3,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
ax[3,0].text(-0.01,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[3,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[3,0].set_ylabel('RT (ms)', fontsize = 20)
ax[3,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day1'], complete_df['RT_day1'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day1', y = 'RT_day1', ax = ax[3,1])
ax[3,1].text(0,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[3,1].axvline(0, color = 'k', linewidth=0.5)
ax[3,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[3,1].set_ylabel('RT (ms)', fontsize = 20)
plt.title('Day 1')
plt.show()

"Day 2"
fig, ax = plt.subplots(4,2, figsize = (15, 35))
slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RIspread_day2'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RIspread_day2', ax = ax[0,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
ax[0,0].text(0,0.14, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[0,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[0,0].set_ylabel('RI-Spread', fontsize = 20)
ax[0,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RIspread_day2'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RIspread_day2', ax = ax[0,1])
ax[0,1].text(0,0.12, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[0,1].axvline(0, color = 'k', linewidth=0.5)
ax[0,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[0,1].set_ylabel('RI-Spread', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['RT_diff_stt_day2'], no_outlier_df['hpcf_rand_day2'])
sns.regplot(data = no_outlier_df, x = 'RT_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
ax[1,0].text(-0.01,0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[1,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[1,0].set_ylabel('HRCF (random DTT)', fontsize = 20)
ax[1,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(no_outlier_df['ER_diff_stt_day2'], no_outlier_df['hpcf_rand_day2'])
sns.regplot(data = no_outlier_df, x = 'ER_diff_stt_day2', y = 'hpcf_rand_day2', ax = ax[1,1])
ax[1,1].text(0,0.7, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[1,1].axvline(0, color = 'k', linewidth=0.5)
ax[1,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[1,1].set_ylabel('HRCF (random DTT)', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['ER_total_day2'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'ER_total_day2', ax = ax[2,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[0,0], color = 'r')
ax[2,0].text(-0.01,0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[2,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[2,0].set_ylabel('ER', fontsize = 20)
ax[2,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['ER_total_day2'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'ER_total_day2', ax = ax[2,1])
ax[2,1].text(0,0.1, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[2,1].axvline(0, color = 'k', linewidth=0.5)
ax[2,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[2,1].set_ylabel('ER', fontsize = 20)

slope, intercept, r, p, std_err = stats.linregress(complete_df['RT_diff_stt_day2'], complete_df['RT_day2'])
sns.regplot(data = complete_df, x = 'RT_diff_stt_day2', y = 'RT_day2', ax = ax[3,0])
# sns.regplot(data = complete_df, x='ER_diff_stt_day2', y='ER_diff_stt_day2', ax = ax[1,0], color = 'r')
ax[3,0].text(0,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,0].axhline(0, color = 'k', linewidth=0.5)
ax[3,0].set_xlabel(r'$\Delta$RT (ms)', fontsize = 20)
ax[3,0].set_ylabel('RT (ms)', fontsize = 20)
ax[3,0].axvline(0, color = 'k', linewidth=0.5)

slope, intercept, r, p, std_err = stats.linregress(complete_df['ER_diff_stt_day2'], complete_df['RT_day2'])
sns.regplot(data = complete_df, x = 'ER_diff_stt_day2', y = 'RT_day2', ax = ax[3,1])
ax[3,1].text(0,420, 'r=%.4f, p = %.4f'%(r,p), fontsize = 20)
# ax.axhline(complete_df['ER_diff_stt_day2'].mean())
# ax.axvline(complete_df['RT_diff_stt_day2'].mean())
# ax[0,1].axhline(0, color = 'k', linewidth=0.5)
ax[3,1].axvline(0, color = 'k', linewidth=0.5)
ax[3,1].set_xlabel(r'$\Delta$ER (pp)', fontsize = 20)
ax[3,1].set_ylabel('RT (ms)', fontsize = 20)
plt.title('Day 2')
plt.show()

#%%
'''
    Plot Bayesian Correlation as Network
'''

import networkx as nx
import matplotlib.pyplot as pltW
import numpy as np
import pickle
import matplotlib.pyplot as plt

day = 1

BF_matrix, r_matrix, nodes = pickle.load(open(f"Bayesian_Spearman_Correlation_Day{day}_Jan23.p", "rb" ))  
BF_matrix = abs(BF_matrix)
BF_matrix[abs(BF_matrix)<3.2] = 0
BF_matrix[BF_matrix>50] = 50

# Create a graph from the correlation matrix
G = nx.Graph()

node_labels = {i: f"{nodes[i]}" for i in range(len(nodes))}  # Add labels for all nodes

if day == 2:
    rename_labels = {'RT_day2': 'RT', 
                'hpcf_rand_day2': 'HRCF', 
                'RT_diff_stt_day2': r'$\Delta$RT', 
                'RIspread_day2': 'RI', 
                'ER_diff_stt_day2': r'$\Delta$ER',
                'ER_total_day2': 'ER',
                'CRspread_day2': 'CR',
                'CIspread_day2': 'CI'}

elif day == 1:
    rename_labels = {'RT_day1': 'RT', 
                'hpcf_rand_day1': 'HRCF', 
                'RT_diff_stt_day1': r'$\Delta$RT', 
                'RIspread_day1': 'RI', 
                'ER_diff_stt_day1': r'$\Delta$ER',
                'ER_total_day1': 'ER',
                'CRspread_day1': 'CR',
                'CIspread_day1': 'CI'}

for i in node_labels.keys():
    node_labels[i] = rename_labels[node_labels[i]]

# Add nodes
num_nodes = BF_matrix.shape[0]
G.add_nodes_from(node_labels.keys())

# Add edges with weights (correlation strengths)
for i in range(num_nodes):
    for j in range(i + 1, num_nodes):
        weight = r_matrix[i, j]
        width = BF_matrix[i,j]
        G.add_edge(i, j, weight=weight, width=width)

# Extract edge weights
edge_weights = [G[i][j]['weight'] for i, j in G.edges()]
edge_widths = [G[i][j]['width'] for i, j in G.edges()]
edge_widths = [np.log(wi) if wi > 0.0001 else 0 for wi in edge_widths ]

# Draw the graph
pos = nx.spring_layout(G, center=[2,3], k = 20, iterations = 200)  # You can experiment with different layout algorithms
pos = {0: [2.72236196, 3.68281796],
 1: [1.93611356, 2.        ],
 2: [1.26677175, 2.34963383],
 3: [2.64037404, 2.29196393],
 4: [1.04263468, 3.05845579],
 5: [2.05088234, 3.92069689],
 6: [2.97769941, 2.96918378],
 7: [1.36316227, 3.72724783]}
# edge_colors = plt.cm.RdBu([G[u][v]['weight'] for u, v in G.edges()])

standardize_color = 1
if standardize_color:
    cmap = plt.cm.RdBu
    nx.draw(G, 
            pos, 
            labels = node_labels, 
            with_labels=True, 
            font_weight='bold', 
            node_size=700, 
            node_color='skyblue', 
            edge_color=cmap((np.array(edge_weights)+1)/2), # map [-1,1] to [0,1]
            # edge_color=edge_colors,
            width=edge_widths,
            edge_cmap = plt.cm.RdBu)
    
    # Add colorbar
    norm = plt.Normalize(vmin=-1., vmax=1.)
    sm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu, norm=norm)
    sm.set_array([])  # dummy empty array
    cbar = plt.colorbar(sm, ax=plt.gca())  # Adjust the shrink and aspect parameters as needed
    
else:
    nx.draw(G, 
            pos, 
            labels = node_labels, 
            with_labels=True, 
            font_weight='bold', 
            node_size=700, 
            node_color='skyblue', 
            edge_color=edge_weights, # map [-1,1] to [0,1]
            # edge_color=edge_colors,
            width=edge_widths,
            edge_cmap = plt.cm.RdBu)
    
    # Add colorbar
    norm = plt.Normalize(vmin=min(edge_weights), vmax=max(edge_weights))
    sm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu, norm=norm)
    sm.set_array([])  # dummy empty array
    cbar = plt.colorbar(sm, ax=plt.gca())  # Adjust the shrink and aspect parameters as needed
    
plt.title(f"Day {day}")
plt.savefig(f"Bayesian_Spearman_Correlation_Day{day}.png", dpi=300)
# Show the plot
plt.show()

#%%
'''
    Compute average repetition values.
'''

"out is data for DDM"
import data_for_DDM as ddm

out = ddm.get_ddm_data(save=1)
out['repvals1'] = out['repvals'].map(lambda repval: repval[0])
out['repvals2'] = out['repvals'].map(lambda repval: repval[1])
out['repvals3'] = out['repvals'].map(lambda repval: repval[2])
out['repvals4'] = out['repvals'].map(lambda repval: repval[3])
out['repmax'] = out['repvals'].map(lambda repval: max(repval))
out['repstd'] = out['repvals'].map(lambda repval: np.array(repval).std())

df = out[out['jokertypes'] > 0]
for i in range(0,14,2):
    print(df[(df['blockidx'] == i) | (df['blockidx'] == i+1)]['repmax'].mean())
    print(df[(df['blockidx'] == i) | (df['blockidx'] == i+1)]['repmax'].std())
    print(df[(df['blockidx'] == i) | (df['blockidx'] == i+1)]['repstd'].mean())
    print("=======")

#%%

cong_sign = 0
incong_sign = 0
for agid in expdata_df['ID'].unique():
    causal_df = expdata_df[(expdata_df['blocktype'] == 0) & (expdata_df['ID'] == agid)]
    
    cong_seqchoice_idxs = causal_df[(causal_df['jokertypes'] == 1) & (causal_df['blockidx'] > 5) & (causal_df['choices_GD'] == 1)].index
    cong_antiseqchoice_idxs = causal_df[(causal_df['jokertypes'] == 1) & (causal_df['blockidx'] > 5) & (causal_df['choices_GD'] == 0)].index
    
    cong_seqc_prevRT =  causal_df.loc[cong_seqchoice_idxs - 1, 'RT']
    cong_antiseqc_prevRT =  causal_df.loc[cong_antiseqchoice_idxs - 1, 'RT']
    t,p = scipy.stats.ttest_ind(np.array(cong_seqc_prevRT, dtype = float), np.array(cong_antiseqc_prevRT, dtype=float))
    cong_sign += ((p<0.05) & (t<0))
    
    incong_seqchoice_idxs = causal_df[(causal_df['jokertypes'] == 2) & (causal_df['blockidx'] > 5) & (causal_df['choices_GD'] == 0)].index
    incong_antiseqchoice_idxs = causal_df[(causal_df['jokertypes'] == 2) & (causal_df['blockidx'] > 5) & (causal_df['choices_GD'] == 1)].index
    
    incong_seqc_prevRT =  causal_df.loc[incong_seqchoice_idxs - 1, 'RT']
    incong_antiseqc_prevRT =  causal_df.loc[incong_antiseqchoice_idxs - 1, 'RT']
    t,p = scipy.stats.ttest_ind(np.array(incong_seqc_prevRT, dtype = float), np.array(incong_antiseqc_prevRT, dtype=float))
    
    if p < .05:
        dfgh
    incong_sign += ((p<0.05) & (t<0))
    print("======")
    
    